# Test set with non-existant keys, which should get detected
# and complained about.
# We test:
# Scalar in root
# Scalar in group
# Scalar in nested group
# Scalar in group in list
# Group in root
# Group in nested group
# List in root

mybool: true;
myint: 23;
myint64: 8745348923487324;
myfloat: 2.71828182846;
mystring: "global mandatory string";

myobool: true;
myoint: 54;
myoint64: 57;
myofloat: 2.23;
myostring: "good bye cruel world";

myvarstr: "a variable string";

nonexistant: "scalar not in schema!";

group: {
    gmybool: true;
    gmyint: 32;
    gmyint64: 12;
    gmyfloat: 3.14;
    gmystring: "string in group";
    gnonexistant: "scalar in group also not in schema";
}

nonexistantgroup: {
    gmybool: true;
    gmyint: 32;
    gmyint64: 12;
}

dgroup: {
dlvl2: {
dlvl3: {
gdmybool: false;
gdmyint: 322;
gdmyint64: 123;
gdmyfloat: 3.141;
gdmystring: "string in deep group";
gdnonexistant: "scalar in deep group not in schema";
       },
nonexistantgroup: {
   thing1: "foo";
   thing2: "bar";
}
       }
        }

list: (
          {
lmybool: false;
lmyint: 21322;
lmyint64: 321123;
lmyfloat: 3.14159213456789;
lmystring: "first";
          },
          {
lmybool: false;
lmyint: 12232;
lmyint64: 231213;
lmyfloat: 3.21314145675989;
lmystring: "second";
lnonexistant: "non existant scalar in a list";
          },
          {
lmybool: true;
lmyint: 22213;
lmyint64: 123321;
lmyfloat: .14159213456789;
lmystring: "third";
          }
      );

non_existant_list: (
    {
        thing1a: 1;
        thing1b: 2;
    },
    {
        thing2a: "a";
        thing2b: "b";
    }
);
